#!/sbin/sh

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  if ($BOOTMODE); then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES='/system/build.prop'
  fi
  cat $FILES 2>/dev/null | sed -n $REGEX | head -n 1
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

mount_image() {
  if [ ! -d "$2" ]; then
    mkdir -p $2 2>/dev/null
    chmod 755 $2
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "- Mounting $1 to $2"
          break;
        fi
      fi
    done
  fi
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

mktouch() {
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

payload_size_check() {
  reqSizeM=0;
  for entry in $(unzip -l "$@" 2>/dev/null | tail -n +4 | awk '{ print $1 }'); do
    test $entry != "--------" && reqSizeM=$((reqSizeM + entry)) || break;
  done;
  test $reqSizeM -lt 1048576 && reqSizeM=1 || reqSizeM=$((reqSizeM / 1048576));
}

target_size_check() {
  e2fsck -p -f $1
  curBlocks=`e2fsck -n $1 2>/dev/null | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=$((`echo "$curBlocks" | cut -d/ -f1` * 4 / 1024));
  curSizeM=$((`echo "$curBlocks" | cut -d/ -f2` * 4 / 1024));
  curFreeM=$((curSizeM - curUsedM));
}

# custom functions

set_separate_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $6 $8
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $4 $5 $7 $9
  done
}

install_package() {
  # Install Android package $APKNAME $PACKAGENAME
  if [ -f "$MODPATH/system/app/${1%.apk}/$1" ]; then
    ui_print "- Installing ${1%.apk} as system app"
    rm -rf /data/app/${2}-*
    rm -rf /data/data/${2}

  elif [ -f "$MODPATH/system/priv-app/${1%.apk}/$1" ]; then
    ui_print "- Installing ${1%.apk} as system priv-app"
    rm -rf /data/app/${2}-*
    rm -rf /data/data/${2}

  elif [ -f "$INSTALLER/$1" ]; then
    if [ -z `ls /data/app | grep "$2"-` ]; then
      ui_print "- Installing ${1%.apk} as data app"
      cp -af $INSTALLER/$1 /data/$1
      APKPATH="$2"-1
      for i in `ls /data/app | grep "$2"-`; do
        if [ `cat /data/system/packages.xml | grep $i >/dev/null 2>&1; echo $?` -eq 0 ]; then
          APKPATH=$i
          break;
        fi
      done
      rm -rf /data/app/"$2"-*
      ui_print "  target path: /data/app/$APKPATH"
      mkdir /data/app/$APKPATH
      chown 1000.1000 /data/app/$APKPATH
      chmod 0755 /data/app/$APKPATH
      chcon u:object_r:apk_data_file:s0 /data/app/$APKPATH
      cp /data/$1 /data/app/$APKPATH/base.apk
      chown 1000.1000 /data/app/$APKPATH/base.apk
      chmod 0644 /data/app/$APKPATH/base.apk
      chcon u:object_r:apk_data_file:s0 /data/app/$APKPATH/base.apk
      rm /data/$1
    else
      ui_print "- ${1%.apk} already exists on the device"
      rm /data/$1
    fi

  else
    ui_print "- ${1%.apk} is not included, install it later by yourself"

  fi
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

if [ -z "$BOOTMODE" ]; then
  BOOTMODE=false
fi

if ($BOOTMODE) && (! is_mounted /magisk); then
  ui_print "! Magisk is not activated!... abort"
  exit 1
fi

# Fix SuperSU.....
($BOOTMODE) && /data/magisk/sepolicy-inject -s fsck --live

TMPDIR=/tmp
MOUNTPATH=/magisk
IMGNAME=magisk.img

if ($BOOTMODE); then
  TMPDIR=/dev/tmp
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" config.sh

if [ ! -f "config.sh" ]; then
  ui_print "! Failed: Unable to extract zip file!"
  exit 1
fi

source config.sh

INSTALLER=$TMPDIR/$MODID
MODPATH=$MOUNTPATH/$MODID

rm -rf $INSTALLER
mkdir -p $INSTALLER
cd $INSTALLER
# unzip -o "$ZIP" common/* module.prop
unzip -o "$ZIP"

##########################################################################################
# Main
##########################################################################################

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

ui_print "- Mounting /system(ro), /vendor(ro), /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if [ ! -f '/system/build.prop' ]; then
  ui_print "! Failed: /system could not be mounted!"
  exit 1
fi

# FILE LOCATIONS

if [ -d "/system/system" ]; then
  SYS=/system/system
else
  SYS=/system
fi

if [ ! -d "$SYS/vendor" ] || [ -L "$SYS/vendor" ]; then
  VEN=/vendor
elif [ -d "$SYS/vendor" ] || [ -L "/vendor" ]; then
  VEN=$SYS/vendor
fi

if [ -e "$VEN/build.prop" ] && [ ! -e "$SYS/build.prop" ]; then
  BP=$VEN/build.prop
elif [ -e "$SYS/build.prop" ] && [ ! -e "$VEN/build.prop" ]; then
  BP=$SYS/build.prop
elif [ -e "$SYS/build.prop" ] && [ -e "$VEN/build.prop" ]; then
  if [ $(wc -c < "$SYS/build.prop") -ge $(wc -c < "$VEN/build.prop") ]; then
    BP=$SYS/build.prop
  else
    BP=$VEN/build.prop
  fi
fi

if [ -d "/sdcard0" ]; then
  SDCARD=/sdcard0
elif [ -d "/sdcard/0" ]; then
  SDCARD=/sdcard/0
else
  SDCARD=/sdcard
fi

CONFIG_FILE=$SYS/etc/audio_effects.conf
#OFFLOAD_CONFIG=$SYS/etc/audio_effects_offload.conf
OFFLOAD_CONFIG=/system/etc/audio_offload_effects.conf
OTHER_VENDOR_FILE=$SYS/etc/audio_effects_vendor.conf
HTC_CONFIG_FILE=$SYS/etc/htc_audio_effects.conf
VENDOR_CONFIG=$VEN/etc/audio_effects.conf

AUD_POL=$SYS/etc/audio_policy.conf
AUD_POL_CONF=$SYS/etc/audio_policy_configuration.xml
AUD_OUT_POL=$VEN/etc/audio_output_policy.conf
V_AUD_POL=$VEN/etc/audio_policy.conf

API=$(grep_prop ro.build.version.sdk $BP)
ABI=$(grep_prop ro.product.cpu.abi $BP | cut -c-3)
ABI2=$(grep_prop ro.product.cpu.abi2 $BP | cut -c-3)
ABILONG=$(grep_prop ro.product.cpu.abi $BP)

ARCH=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=true; fi;

PRODUCT=$(grep_prop ro.build.product $BP)
if [ -z "$PRODUCT" ]; then
  PRODUCT=$(grep_prop ro.product.device $BP)
fi
if [ -z "$PRODUCT" ]; then
  PRODUCT=$(grep_prop ro.product.name $BP)
fi

BRAND=$(grep_prop ro.product.brand $BP)

WIFICONF=$SYS/etc/wifi/WCNSS_qcom_cfg.ini
BONDING24G=
BONDING5G=

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods
ui_print "- Checking compatibility"
if [ "$API" -lt "21" ]; then
  ui_print "! Magisk ONLY supports Lollipop 5.0+ (SDK 21+)"
  rm -rf $INSTALLER
  if (! $BOOTMODE); then
    umount /system
    umount /vendor 2>/dev/null
  fi
  exit 1
elif [ ! -f $WIFICONF ]; then
  ui_print "! Channel bonding configuration file NOT found."
  rm -rf $INSTALLER
  if (! $BOOTMODE); then
    umount /system
    umount /vendor 2>/dev/null
  fi
  exit 1
else
  ui_print "- Magisk supports SDK $API. Channel bonding conf exists."
  BONDING5G=$(grep_prop gChannelBondingMode5GHz $WIFICONF)
  BONDING24G=$(grep_prop gChannelBondingMode24GHz $WIFICONF)
  if [ -z $BONDING5G ] && [ -z $BONDING24G ]; then
    ui_print "! Channel bonding parameters are not supported."
    rm -rf $INSTALLER
    if (! $BOOTMODE); then
      umount /system
      umount /vendor 2>/dev/null
    fi
    exit 1
  elif [ -n $BONDING5G ] && [ -z $BONDING24G ]; then
    ui_print "  Only 5GHz bonding parameter is supported."
  elif [ -z $BONDING5G ] && [ -n $BONDING24G ]; then
    ui_print "  Only 2.4GHz bonding parameter is supported."
  else
    ui_print "  Both 2.4GHz and 5GHz bonding parameters are supported."
    if [ $BONDING5G = "1" ] && [ $BONDING24G = "1" ]; then
      ui_print "! But channel bondings are enabled already. Nothing to be done."
      rm -rf $INSTALLER
      if (! $BOOTMODE); then
        umount /system
        umount /vendor 2>/dev/null
      fi
      exit 1
    fi
  fi  
fi

# LIBV4A=$INSTALLER/Supported/viper/libv4a_fx_jb_NEON.so
# if [ "$ARCH" = "x86" -o "$ARCH" = "x64" ]; then
#   LIBV4A=$INSTALLER/Supported/viper/libv4a_fx_jb_X86.so
# fi

IMG=
if (is_mounted /data); then
  IMG=/data/$IMGNAME
  if [ ! -f "/data/magisk.img" ]; then
    ui_print "! Magisk is not installed!"
    ui_print "! Magisk is required for this mod!"
    exit 1
  fi
else
  IMG=/cache/magisk.img
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible  *"
  ui_print "* Installation will still proceed *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

payload_size_check "$ZIP" "*"

if [ -f "$IMG" ]; then
  ui_print "- $IMG detected!"
  target_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$((((reqSizeM + curUsedM) / 32 + 2) * 32))
    ui_print "- Resizing $IMG to ${SIZE}M..."
    resize2fs $IMG ${SIZE}M
  fi
else
  SIZE=$(((reqSizeM / 32 + 2) * 32));
  ui_print "- Creating $IMG with size ${SIZE}M"
  make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
fi

mount_image $IMG $MOUNTPATH
if (! is_mounted $MOUNTPATH); then
  ui_print "! $IMG mount failed... abort"
  exit 1
fi

# Create mod paths
ui_print "- Cleaning conflictions"
# rm -rf /data/app/com.atmos-*
# rm -rf /data/data/com.atmos
# rm -rf /data/app/com.atmos.daxappUI-*
# rm -rf /data/data/com.atmos.daxappUI
rm -rf $MODPATH

# Create mod paths
# empty folders will be deleted by magisk_mount.sh during boot
# mkdir -p $MODPATH
mkdir -p $MODPATH$SYS/etc/wifi
mkdir -p $MODPATH$VEN/etc

# Handle removal files
if [ -n "$REMOVAL" ]; then
  ui_print "- Removing existing files systemlessly"
  for TARGET in $REMOVAL; do
    if [ -d "$TARGET" ]; then
      mktouch $MODPATH$TARGET/.replace
      ui_print "  removing folder $TARGET"
    elif [ -f "$TARGET" ]; then
      mktouch $MODPATH$TARGET
      ui_print "  removing file $TARGET"
    elif [ -L $TARGET ]; then
      mktouch $MODPATH$TARGET
      ui_print "  removing Symlink $TARGET"
    else
      :
    fi
  done
fi

# Copy files
ui_print "- Copying files"
# unzip -o "$ZIP" system/* -d $MODPATH

cp -af $WIFICONF $MODPATH$WIFICONF

# Copy selected lib
# cp -af $LIBV4A $MODPATH/system/lib/soundfx/libv4a_fx_ics.so

if [ -n $BONDING5G ] && [ $BONDING5G = "0" ]; then
  ui_print "- Enabling 5GHz channel bonding"
  sed -i "s/gChannelBondingMode5GHz=0/gChannelBondingMode5GHz=1/" $MODPATH$WIFICONF
fi
if [ -n $BONDING24G ] && [ $BONDING24G = "0" ]; then
  ui_print "- Enabling 2.4GHz channel bonding"
  sed -i "s/gChannelBondingMode24GHz=0/gChannelBondingMode24GHz=1/" $MODPATH$WIFICONF
fi 

# Let $WIFICONF in installer take precedence
cp -af $INSTALLER/system/* $MODPATH$SYS 2>/dev/null
cp -af $INSTALLER/vendor/* $MODPATH$VEN 2>/dev/null
if (! $IS64BIT); then
  rm -rf $MODPATH$SYS/lib64 2>/dev/null
  rm -rf $MODPATH$VEN/lib64 2>/dev/null
fi

# Install package
# install_package "$APKNAME" "$PACKAGENAME"

# build property database patch for MOD by resetprop, through a
# property file called "custom_build.prop" or any other name
if ($PROPFILE); then
  cp -af "$INSTALLER/common/$buildname" "$MODPATH/$buildname"
fi

# Handle separate vendor partition replacement is
# ONLY available on Magisk v10+. Below is no need anymore.
# if [ -d "$MODPATH/vendor" ]; then
#   cp -af $MODPATH/vendor /data/tmpvendor
#   rm -rf $MODPATH/vendor
#   cp -af /data/tmpvendor $MODPATH$SYS/vendor
#   rm -rf /data/tmpvendor
# fi

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
if ($AUTOMOUNT); then
  mktouch $MODPATH/auto_mount
fi

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if ($BOOTMODE); then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
if ($POSTFSDATA); then
  cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
fi

# service mode scripts
if ($LATESTARTSERVICE); then
  cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
fi

ui_print "- Setting permissions"
set_permissions

ui_print "- Unmounting partitions"

umount $MOUNTPATH
losetup -d $LOOPDEVICE
rm -rf $MOUNTPATH
# Shrink the image if possible
target_size_check $IMG
NEWDATASIZE=$(((curUsedM / 32 + 2) * 32));
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "- Shrinking $IMG to ${NEWDATASIZE}M...";
  resize2fs $IMG ${NEWDATASIZE}M;
fi

if (! $BOOTMODE); then
  umount /system
  umount /vendor 2>/dev/null
fi

ui_print "- Done"
exit 0
